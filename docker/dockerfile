# This code comes from with minor modifications:
#  - https://github.com/discourse/discourse_docker/blob/93906f14f4a2df88aea11340fb1b11efbc4a785f/image/base/slim.Dockerfile
#  - https://github.com/discourse/discourse_docker/blob/93906f14f4a2df88aea11340fb1b11efbc4a785f/image/base/release.Dockerfile
FROM debian:bullseye-slim

ARG DISCOURSE_MAXMIND_LICENSE_KEY

ENV PG_MAJOR 13
ENV RUBY_ALLOCATOR /usr/lib/libjemalloc.so.1
ENV RAILS_ENV production
ENV DISCOURSE_MAXMIND_LICENSE_KEY=$DISCOURSE_MAXMIND_LICENSE_KEY
ENV BUNDLER_VERSION 2.3.5

RUN echo 2.0.`date +%Y%m%d` > /VERSION

RUN echo 'deb http://deb.debian.org/debian bullseye-backports main' > /etc/apt/sources.list.d/bullseye-backports.list
RUN echo "debconf debconf/frontend select Teletype" | debconf-set-selections
RUN apt update && apt -y install gnupg sudo curl fping
RUN sh -c "fping proxy && echo 'Acquire { Retries \"0\"; HTTP { Proxy \"http://proxy:3128\";}; };' > /etc/apt/apt.conf.d/40proxy && apt update || true"
RUN apt-mark hold initscripts
RUN apt -y upgrade

RUN apt install -y locales locales-all
ENV LC_ALL en_US.UTF-8
ENV LANG en_US.UTF-8
ENV LANGUAGE en_US.UTF-8

RUN curl https://apt.postgresql.org/pub/repos/apt/ACCC4CF8.asc | apt-key add -
RUN echo "deb http://apt.postgresql.org/pub/repos/apt/ bullseye-pgdg main" | \
        tee /etc/apt/sources.list.d/postgres.list
RUN curl --silent --location https://deb.nodesource.com/setup_16.x | sudo bash -
RUN curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add -
RUN echo "deb https://dl.yarnpkg.com/debian/ stable main" > /etc/apt/sources.list.d/yarn.list
RUN apt -y update
# install these without recommends to avoid pulling in e.g.
# X11 libraries, mailutils
RUN apt -y install --no-install-recommends git rsyslog logrotate cron ssh-client less
RUN apt -y install autoconf build-essential ca-certificates rsync \
                       libxslt-dev libcurl4-openssl-dev \
                       libssl-dev libyaml-dev libtool \
                       libpcre3 libpcre3-dev zlib1g zlib1g-dev \
                       libxml2-dev gawk parallel \
                       postgresql-${PG_MAJOR} postgresql-client-${PG_MAJOR} \
                       postgresql-contrib-${PG_MAJOR} libpq-dev libreadline-dev \
                       anacron wget \
                       psmisc whois brotli libunwind-dev \
                       libtcmalloc-minimal4 cmake \
                       pngcrush pngquant
RUN sed -i -e 's/start -q anacron/anacron -s/' /etc/cron.d/anacron
RUN sed -i.bak 's/$ModLoad imklog/#$ModLoad imklog/' /etc/rsyslog.conf
RUN sed -i.bak 's/module(load="imklog")/#module(load="imklog")/' /etc/rsyslog.conf
RUN dpkg-divert --local --rename --add /sbin/initctl
RUN sh -c "test -f /sbin/initctl || ln -s /bin/true /sbin/initctl"
RUN cd / &&\
    apt -y install runit socat &&\
    mkdir -p /etc/runit/1.d &&\
    apt clean &&\
    rm -f /etc/apt/apt.conf.d/40proxy &&\
    locale-gen en_US &&\
    apt install -y nodejs yarn &&\
    npm install -g terser &&\
    npm install -g uglify-js

ADD ./docker/install-imagemagick /tmp/install-imagemagick
RUN /tmp/install-imagemagick

ADD ./docker/install-jemalloc /tmp/install-jemalloc
RUN /tmp/install-jemalloc

ADD ./docker/install-oxipng /tmp/install-oxipng
RUN /tmp/install-oxipng

ADD ./docker/install-ruby /tmp/install-ruby
RUN /tmp/install-ruby

RUN echo 'gem: --no-document' >> /usr/local/etc/gemrc &&\
    gem update --system

RUN gem install "bundler:${BUNDLER_VERSION}" pups --force &&\
    mkdir -p /pups/bin/ &&\
    ln -s /usr/local/bin/pups /pups/bin/pups

# This tool allows us to disable huge page support for our current process
# since the flag is preserved through forks and execs it can be used on any
# process
ADD ./docker/thpoff.c /src/thpoff.c
RUN gcc -o /usr/local/sbin/thpoff /src/thpoff.c && rm /src/thpoff.c

# clean up for docker squash
RUN rm -fr /usr/share/man &&\
    rm -fr /usr/share/doc &&\
    rm -fr /usr/share/vim/vim74/doc &&\
    rm -fr /usr/share/vim/vim74/lang &&\
    rm -fr /usr/share/vim/vim74/spell/en* &&\
    rm -fr /usr/share/vim/vim74/tutor &&\
    rm -fr /usr/local/share/doc &&\
    rm -fr /usr/local/share/ri &&\
    rm -fr /usr/local/share/ruby-build &&\
    rm -fr /var/lib/apt/lists/* &&\
    rm -fr /root/.gem &&\
    rm -fr /root/.npm &&\
    rm -fr /tmp/*

# this is required for arch64 which uses buildx
# see https://github.com/docker/buildx/issues/150
RUN rm -f /etc/service

# Discourse specific bits
RUN useradd discourse -s /bin/bash -m -U &&\
    mkdir -p /var/www/discourse &&\
    mkdir -p /var/www/discourse/log
WORKDIR /var/www/discourse

COPY ./docker/etc/  /etc
COPY ./docker/sbin/ /sbin

ADD ["./config.ru", "./.ruby-version.sample","./Brewfile","./package.json","./README.md","./.rubocop.yml","./.eslintignore","./Gemfile.lock","./.prettierrc","./Gemfile","./.prettierignore","./.ruby-gemset.sample","./translator.yml","./Rakefile","./.licensed.yml","./lefthook.yml","./yarn.lock","./.eslintrc","./.template-lintrc.js","./.rspec_parallel","./CONTRIBUTING.md","./LICENSE.txt","./.rspec", "./"] .
ADD "script/" "script/"
ADD "app/" "app/"
ADD "db/" "db/"
ADD "plugins/" "plugins/"
ADD "lib/" "lib/"
ADD "config/" "config/"
ADD "test/" "test/"
ADD "bin/" "bin"
ADD "images/" "images/"
ADD "vendor/" "vendor/"

RUN chown -R discourse:discourse /var/www/discourse

RUN sudo -u discourse bundle config --local deployment true &&\
    sudo -u discourse bundle config --local path ./vendor/bundle &&\
    sudo -u discourse bundle config --local without test development &&\
    sudo -u discourse bundle install --jobs 4 &&\
    sudo -u discourse yarn install --production &&\
    sudo -u discourse yarn cache clean &&\
    bundle exec rake maxminddb:get &&\
    chown -R discourse:discourse tmp public &&\
    find /var/www/discourse/vendor/bundle -name tmp -type d -exec rm -rf {} +

RUN cd plugins && git clone https://github.com/discourse/docker_manager.git &&\
    git clone https://github.com/angusmcleod/discourse-events.git &&\
    git clone https://github.com/davidtaylorhq/discourse-whos-online.git &&\
    git clone https://github.com/discourse/discourse-checklist.git &&\
    git clone https://github.com/discourse/discourse-data-explorer.git &&\
    git clone https://github.com/BeXcellent/discourse-allowiframe.git
