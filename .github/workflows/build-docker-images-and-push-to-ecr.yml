name: Build Docker Images and Push to AWS ECR

on:
  push:
    branches: [testing, master]
  # TODO remove pull request after done testing
  pull_request:
    branches: [testing]

jobs:
  setup-env:
    runs-on: ubuntu-latest
    outputs:
      aws-s3-bloom-config-bucket: ${{ steps.branch_based.outputs.aws-s3-bloom-config-bucket }}
      aws-ecs-task-def: ${{ steps.branch_based.outputs.aws-ecs-task-def }}
      aws-ecs-service: ${{ steps.branch_based.outputs.aws-ecs-service }}
    steps:
      - name: Set Variables Depending on Current Branch
        id: branch_based
        run: |
          echo "Running on branch ${{ github.ref }}"
          if [ "${{ github.ref }}" = "refs/heads/master" ]; then
            echo "::set-output name=aws-s3-bloom-config-bucket::bloom-config-production"
            echo "::set-output name=aws-ecs-task-def::commnuity-production"
            echo "::set-output name=aws-ecs-service::commnuity-production"
          elif [ "${{ github.ref }}" = "refs/heads/testing" ]; then
            echo "::set-output name=aws-s3-bloom-config-bucket::bloom-config-testing"
            echo "::set-output name=aws-ecs-task-def::commnuity-testing"
            echo "::set-output name=aws-ecs-service::commnuity-testing"
          fi

  build-proxy:
    runs-on: ubuntu-latest
    outputs:
      docker-image: ${{ steps.build-image.outputs.image }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_COMMUNITY_CI_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_COMMUNITY_CI_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - uses: actions/checkout@v3

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          AWS_ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: discourse-proxy
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker pull $AWS_ECR_REGISTRY/$ECR_REPOSITORY
          docker build -t $AWS_ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG --cache-from $AWS_ECR_REGISTRY/$ECR_REPOSITORY -f ./docker/nginx.dockerfile ./docker
          docker push $AWS_ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$AWS_ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

  build-api:
    runs-on: ubuntu-latest
    needs: setup-env
    outputs:
      docker-image: ${{ steps.build-image.outputs.image }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_COMMUNITY_CI_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_COMMUNITY_CI_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - uses: actions/checkout@v3

      - name: Pull .env from S3
        run: aws s3 cp "s3://${{ needs.setup-env.outputs.aws-s3-bloom-config-bucket }}/env-files/commnuity/api.env" ./.env

      - name: Set environment variables
        run: cat .env >> $GITHUB_ENV

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          AWS_ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: discourse-api
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker pull $AWS_ECR_REGISTRY/$ECR_REPOSITORY
          docker build -t $AWS_ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG --cache-from $AWS_ECR_REGISTRY/$ECR_REPOSITORY -f ./docker/dockerfile --build-arg DISCOURSE_MAXMIND_LICENSE_KEY=${DISCOURSE_MAXMIND_LICENSE_KEY} .
          docker push $AWS_ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$AWS_ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Compile assets and upload them to S3
        env:
          API_DOCKER_IMAGE: ${{ steps.build-image.outputs.image }}
        run: |
          docker network create discourse
          docker run --rm -d --name discourse_db -e POSTGRES_DB=discourse -e POSTGRES_USER=discourse -e POSTGRES_PASSWORD=password --network discourse postgres:13.4-alpine
          docker run --rm -d --name discourse_cache --network discourse redis:alpine
          docker run --rm -i --name assets_compiler --env-file .env -e DISCOURSE_DB_HOST=discourse_db -e DISCOURSE_DB_PASSWORD=password -e DISCOURSE_REDIS_HOST=discourse_cache --network discourse $API_DOCKER_IMAGE sh -c 'bundle exec rake db:prepare && bundle exec rake assets:precompile && bundle exec rake s3:upload_assets'

  deploy:
    runs-on: ubuntu-latest
    needs: [setup-env, build-proxy, build-api]
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_COMMUNITY_CI_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_COMMUNITY_CI_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ needs.setup-env.outputs.aws-ecs-task-def }} --query taskDefinition > task-definition.json

      - name: Fill in the new image IDs in the Amazon ECS task definition
        id: proxy-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: proxy
          image: ${{ needs.build-proxy.outputs.docker-image }}

      - name: Fill in the new image IDs in the Amazon ECS task definition
        id: api-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          container-name: api
          image: ${{ needs.build-api.outputs.docker-image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.api-task-definition }}
          service: ${{ needs.setup-env.outputs.aws-ecs-service }}
          cluster: bloom
          wait-for-service-stability: true
